"""
Django settings for i project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
import datetime
from django.utils.translation import ugettext_lazy as _

from django_jinja.builtins import DEFAULT_EXTENSIONS as\
    JINJA2_DEFAULT_EXTENSIONS
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# The root directory of the Django project.
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# The root directory of the project (the lowest level).
BASE_DIR_UP = os.path.dirname(BASE_DIR)

BASE_DIR_UP_UP = os.path.dirname(BASE_DIR_UP)
# Path to the custom Django applications.
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# The path to the server configuration - use `project_settings.py` file where
# you can override the `settings.py` parameters.
sys.path.insert(1, os.path.join(BASE_DIR_UP, 'world', 'etc'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=$6h%=20do5cn*3h)xr6n^&$60culuca!)&k$37hixhmj#3zcj'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Set custom User Model.
AUTH_USER_MODEL = 'accounts.User'

ADMIN_SITE_HEADER = _('Moskvasirius')

ALLOWED_HOSTS = ('lk.moskvasirius.ru', '127.0.0.1')


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    #Custom apps

    'rest_framework',
    'corsheaders',

    #Local apps
    'accounts',
    'community',
    'ngcli'
)

MIDDLEWARE = (

    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.middleware.locale.LocaleMiddleware',

)

CORS_ORIGIN_WHITELIST = (
    '127.0.0.1:4200',
    'localhost:4200', #Angular frontend
)


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    )
}

JWT_AUTH = {
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=86400),
}

ROOT_URLCONF = 'basic.urls'

# TEMPLATES
# The templates are found in custom applications too.
_template_dirs = [os.path.join(BASE_DIR, 'website/templates'), ]
for root, dirs, files in os.walk(os.path.join(BASE_DIR, 'apps')):
    if 'templates' in dirs:
            _template_dirs.append(os.path.join(root, 'templates'))

NG_SRC_PATH = os.path.join(BASE_DIR, 'website')

TEMPLATES = [{
    'BACKEND': 'django_jinja.backend.Jinja2',
    'APP_DIRS': True,
    'DIRS': _template_dirs,
    'OPTIONS': {
        # Match the template names ending in .html but not the ones in the
        # admin folder.
        'match_extension': '.jinja',
        'match_regex': r'^(?!admin/).*',
        'app_dirname': 'templates',
        # Can be set to "jinja2.Undefined" or any other subclass.
        'undefined': None,
        'newstyle_gettext': True,
        'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
            # Custom context processors.
            #'basic.context_processors.platform_groups',
        ],
        'extensions': JINJA2_DEFAULT_EXTENSIONS, 
        'autoescape': True,
        'auto_reload': DEBUG,
        'translation_engine': 'django.utils.translation',
    }
},{
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': _template_dirs,
    'APP_DIRS': True,
    'OPTIONS': {
        'context_processors': [
            'django.template.context_processors.debug',
            'django.template.context_processors.request',
            'django.contrib.auth.context_processors.auth',
            'django.contrib.messages.context_processors.messages',
        ],
    },
}]

WSGI_APPLICATION = 'basic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR_UP, 'world/var/sys/sqlite3/db.sqlite3'),
    }
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'CRITICAL',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR_UP, 'world/var/log/critical.log'),
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'CRITICAL',
            'propagate': True,
        },
    },
}

BOOTSTRAP_ADMIN_SIDEBAR_MENU = True



# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'ru'
# Supported languages
LANGUAGES = (
    ('ru', _('Russian')),
)


TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
LOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale/'),
)


LOGIN_REDIRECT_URL = "/"
REDIRECT_FIELD_NAME = 'next'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/
_static_dirs = [os.path.join(BASE_DIR, 'website/static'), ]
for root, dirs, files in os.walk(os.path.join(BASE_DIR, 'apps')):
    if 'static' in dirs:
            _static_dirs.append(os.path.join(root, 'static'))
STATIC_URL = '/static/'
STATICFILES_DIRS = _static_dirs
STATIC_ROOT = os.path.join(BASE_DIR_UP, 'world/var/www/static')
            
 # Media.
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR_UP_UP, 'public_html/media')


ROBOKASSA_LOGIN = 'msirius'

#ROBOKASSA_PASSWORD1 = 'kGZeu1lzGN4vrw3dr35P'
#ROBOKASSA_PAsSWORD2 = 'r2sBqHABVvNw9v93Sk4L'

ROBOKASSA_PASSWORD1 = 'TUxrs5guiOV3tYJLT221'
ROBOKASSA_PASSWORD2 = 'uyVjz9ngy2oa8R5D6Oph'

ROBOKASSA_TEST_MODE = True

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Host for sending e-mail.
EMAIL_HOST = 'smtp.gmail.com'

# Port for sending e-mail.
EMAIL_PORT = 587

# Optional SMTP authentication information for EMAIL_HOST.
EMAIL_HOST_USER = 'reg.sirius@gmail.com'
EMAIL_HOST_PASSWORD = '138500cbcmrbcbcmrb'
EMAIL_USE_TLS = True
SERVER_EMAIL = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

try:
    from local_settings import *
except ImportError:
    pass
